(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{141:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return m}));var o=t(1),r=t(6),a=(t(0),t(160)),c={id:"columns-taxonomy",title:"Taxonomy"},i={id:"guides/columns-taxonomy",title:"Taxonomy",description:"[![docs-source](https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a)](https://github.com/infinum/eightshift-libs/blob/develop/src/columns/class-base-taxonomy-columns.php)",source:"@site/docs/guides/columns-taxonomy.md",permalink:"/eightshift-docs/docs/guides/columns-taxonomy",sidebar:"docs",previous:{title:"Post Type",permalink:"/eightshift-docs/docs/guides/columns-post-type"},next:{title:"User",permalink:"/eightshift-docs/docs/guides/columns-user"}},l=[{value:"Example:",id:"example",children:[]}],s={rightToc:l};function m(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/infinum/eightshift-libs/blob/develop/src/columns/class-base-taxonomy-columns.php"}),Object(a.b)("img",Object(o.a)({parentName:"a"},{src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"})))),Object(a.b)("p",null,"Taxonomy Column class is located in ",Object(a.b)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it use ",Object(a.b)("inlineCode",{parentName:"p"},"Eightshift_Libs\\Columns\\Base_Taxonomy_Columns")," class."),Object(a.b)("h2",{id:"example"},"Example:"),Object(a.b)("p",null,"To create custom taxonomy column:\n1. make a new class ",Object(a.b)("inlineCode",{parentName:"p"},"src/columns/class-example-taxonomy-column.php"),".\n2. implement all the methods provided in the example.\n3. register the class inside the ",Object(a.b)("inlineCode",{parentName:"p"},"class-main.php")," file.\n4. dump autoload."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"<?php\n/**\n * Example_Taxonomy_Column class file\n *\n * @since 1.1.0\n * @package Eightshift_Boilerplate\\Columns\n */\n\ndeclare( strict_types=1 );\n\nnamespace Eightshift_Boilerplate\\Columns;\n\n/**\n * Class Example_Taxonomy_Column.\n */\nclass Example_Taxonomy_Column extends Base_Taxonomy_Columns {\n\n  /**\n   * Column name constant name.\n   *\n   * @var string\n   */\n  const COLUMN_NAME = 'example';\n\n  /**\n   * Get the slug of the taxonomy where the additional column should appear.\n   *\n   * @return array The name of the taxonomy.\n   *\n   * @since 2.0.5\n   */\n  protected function get_taxonomy_slug() : array {\n    return [ 'category' ];\n  }\n\n  /**\n   * Add additional taxonomy columns to the columns array.\n   *\n   * @param array $columns The existing column names array with default taxonomy columns (title, author, date etc.).\n   *\n   * @return array         Modified column names array.\n   *\n   * @since 2.0.5\n   */\n  public function add_column_name( array $columns ) : array {\n    $columns[ static::COLUMN_NAME ] = esc_html__( 'Example', 'eightshift-boilerplate' );\n\n    return $columns;\n  }\n\n  /**\n   * Render the taxonomy column content in the custom taxonomy column\n   *\n   * @param  string $string      Blank string.\n   * @param  string $column_name Name of the column.\n   * @param  int    $term_id     Term ID.\n   *\n   * @return string The contetnt to display in the custom column.\n   *\n   * @since 2.0.5\n   */\n  public function render_column_content( string $string, string $column_name, int $term_id ) : string {\n    if ( $column_name === static::COLUMN_NAME ) {\n      echo 'column value';\n    }\n  }\n}\n\n")))}m.isMDXComponent=!0},160:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),m=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},u=function(e){var n=m(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,b=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return t?r.a.createElement(b,i({ref:n},s,{components:t})):r.a.createElement(b,i({ref:n},s))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);