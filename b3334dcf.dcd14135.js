(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{143:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return l}));var o=t(1),a=(t(0),t(158));const i={id:"fonts-custom",title:"Custom fonts"},r={id:"guides/fonts-custom",title:"Custom fonts",description:"To add a custom font and generate `@font-face` rules in built CSS file we recommend using PostCSS plugin: [Font Magician](https://github.com/jonathantneal/postcss-font-magician). Before configuring Font Magician, font files need to be included in the build process.",source:"@site/docs/guides/fonts-custom.md",permalink:"/eightshift-docs/docs/guides/fonts-custom",sidebar:"docs",previous:{title:"Login",permalink:"/eightshift-docs/docs/guides/login"},next:{title:"Icon font",permalink:"/eightshift-docs/docs/guides/fonts-icon"}},c=[{value:"Font files setup",id:"font-files-setup",children:[]},{value:"Font Magician configuration",id:"font-magician-configuration",children:[]},{value:"Using the custom font",id:"using-the-custom-font",children:[]}],s={rightToc:c};function l({components:e,...n}){return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To add a custom font and generate ",Object(a.b)("inlineCode",{parentName:"p"},"@font-face")," rules in built CSS file we recommend using PostCSS plugin: ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/jonathantneal/postcss-font-magician"}),"Font Magician"),". Before configuring Font Magician, font files need to be included in the build process."),Object(a.b)("h2",{id:"font-files-setup"},"Font files setup"),Object(a.b)("p",null,"Font files should be placed in ",Object(a.b)("inlineCode",{parentName:"p"},"theme-name/assets/fonts"),". There are multiple web oriented font file formats. For majority of browsers only ",Object(a.b)("inlineCode",{parentName:"p"},".woff")," format is enough (having it alongisde ",Object(a.b)("inlineCode",{parentName:"p"},".woff2")," is even better), but if you plan to support older browsers (e.g. IE 10 and older) you must include ",Object(a.b)("inlineCode",{parentName:"p"},".eot")," and ",Object(a.b)("inlineCode",{parentName:"p"},".svg")," formats, as well."),Object(a.b)("p",null,"Fonts, and all of their variations, need to be included in ",Object(a.b)("inlineCode",{parentName:"p"},"index.js")," file inside the ",Object(a.b)("inlineCode",{parentName:"p"},"/fonts")," directory:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import './Font-Name-Variation.woff2';\nimport './Font-Name-Variation.woff';\n")),Object(a.b)("p",null,"After running the build process again, fonts will be placed in ",Object(a.b)("inlineCode",{parentName:"p"},"/theme-name/public")," directory and we can configure Font Magician to load them."),Object(a.b)("h2",{id:"font-magician-configuration"},"Font Magician configuration"),Object(a.b)("p",null,"To install Font Magician run:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"npm install postcss-font-magician --save-dev\n")),Object(a.b)("p",null,"or"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"yarn add postcss-font-magician --dev\n")),Object(a.b)("p",null,"In the root of the theme there is already a ",Object(a.b)("inlineCode",{parentName:"p"},"postcss.config.js")," file with ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/postcss/autoprefixer"}),"Autoprefixer")," enabled. To configure Font Magician it needs to be imported first and its configuration needs to be added to the existing one."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"...\nconst postcssFontMagician = require('postcss-font-magician');\n\nmodule.exports = {\n  plugins: [\n    ... // other postCss configs\n    postcssFontMagician({\n      foundries: ['custom'],\n      custom: {\n        FontName: { // font-family declaration\n          variants: {\n            normal: { // font-style variation\n              400: { // font-weight variation\n                url: {\n                  woff: 'Font-Name-Variation.woff',\n                  woff2: 'Font-Name-Variation.woff2',\n                },\n              },\n              ... // other font-weight variation of the same font-tyle\n            },\n            ... // other font-style variation of the same font-family\n          },\n        },\n        ... // other font-family declarations\n      },\n    }),\n  ],\n};\n")),Object(a.b)("p",null,"There are other configuration options for including custom fonts using Font Magician and you can check them in the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/jonathantneal/postcss-font-magician#options"}),"font magician documentation")),Object(a.b)("p",null,"Restart the build process to generate ",Object(a.b)("inlineCode",{parentName:"p"},"@font-face")," rules."),Object(a.b)("h2",{id:"using-the-custom-font"},"Using the custom font"),Object(a.b)("p",null,"To use the custom font in a theme, simply declare a new ",Object(a.b)("inlineCode",{parentName:"p"},"font-family")," rule and assign it to the ",Object(a.b)("strong",{parentName:"p"},"font name")," from the Font Magician configuration. A better approach would be to save the specific ",Object(a.b)("inlineCode",{parentName:"p"},"font-family")," values to variables that can be reused:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scss"}),"// Variable declared in a global variables .scss file.\n$base-font-family: `FontName`, sans-serif,\n\n// Using the variable in .scss partial\nbody {\n  font-family: $base-font-family;\n  ...\n}\n")))}l.isMDXComponent=!0},158:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),f=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},u=function(e){var n=f(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=f(t),b=o,d=u["".concat(r,".").concat(b)]||u[b]||p[b]||i;return t?a.a.createElement(d,c({ref:n},l,{components:t})):a.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var l=2;l<i;l++)r[l]=t[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);