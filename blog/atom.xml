<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://infinum.github.io/eightshift-docs/blog</id>
    <title>Eightshift Development kit Blog</title>
    <updated>2022-01-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://infinum.github.io/eightshift-docs/blog"/>
    <subtitle>Eightshift Development kit Blog</subtitle>
    <icon>https://infinum.github.io/eightshift-docs/img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[Components and blocks]]></title>
        <id>components-and-blocks</id>
        <link href="https://infinum.github.io/eightshift-docs/blog/components-and-blocks"/>
        <updated>2022-01-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Explanation of the difference between components and blocks on a practical example]]></summary>
        <content type="html"><![CDATA[<p>In this blog post, we'll give you a practical explanation about the difference between components and blocks. For a truly in-depth explanation about components and blocks, you can refer to <a href="https://infinum.github.io/eightshift-docs/docs/basics/blocks" target="_blank" rel="noopener noreferrer">our documentation</a>. A more specific explanation about using components in a block can be found in the <a href="https://infinum.github.io/eightshift-docs/docs/basics/blocks-component-in-block/" target="_blank" rel="noopener noreferrer">Component in a Block</a> section.</p><p>One of the things that is really confusing to newcomers is the difference between components and blocks. Let's break it all down.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="component">Component<a class="hash-link" href="#component" title="Direct link to heading">​</a></h3><blockquote><p>A component is like a blank slate, a template without context.</p></blockquote><p>It doesn't know or even care for what it will be used. Can you combine multiple simple components into one complex component? Absolutely! That's exactly what we'll do in the following example. </p><p>Let's say we have a component that consists of an image and a heading. Image and heading are two simple components that come with the theme out-of-the-box.</p><p>Here are a few examples of how this new component can be used:</p><ul><li>displaying a post</li><li>displaying a user or an author</li><li>displaying a photo with the photographer's name</li><li>and many more...</li></ul><p>As you can already see, there are many ways you can use this component. What helps expand the usability of this component even more are <code>attributes</code>. Let's say we have the following attributes:</p><ul><li><code>imagePosition</code> - left, right, top, bottom</li><li><code>imageShape</code> - rectangular, circular</li><li><code>imageWidth</code> - 25%, 50%, 75%</li><li><code>headingColor</code> - black, blue, red</li><li><code>headingSize</code> - small, medium, large</li></ul><p>These attributes give you the option to modify the look of the component, so this specific component can be used for the following:</p><ul><li><strong>related posts</strong> - rectangular image on the left side, 25% image width, heading takes up the remaining 75%, medium heading colored in blue</li><li><strong>user avatar</strong> - circular image on the left side, 25% image width, small heading colored in black</li><li><strong>photo of the day</strong> - rectangular image on the right side which takes 75% width and photographer's name is written in medium blue text</li><li><strong>featured posts</strong> - rectangular image on top, large heading in red color</li></ul><p><img loading="lazy" alt="Component with different attributes" src="/eightshift-docs/assets/images/components-bf67696f503f625fd702f636be80f592.png" width="1086" height="813"></p><p>You can even add conditional logic to your options, e.g. to have the option for <code>imageWidth</code> visible only when <code>imagePosition</code> is set to left or right. And when <code>imagePosition</code> is set to top or bottom, it defaults to 100% width.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="block">Block<a class="hash-link" href="#block" title="Direct link to heading">​</a></h3><p>So, what about blocks? Blocks can consist of one or more components and, most importantly, allow you to use them in the editor. Technically, blocks can consist of zero components, but we encourage you to build blocks from components because that increases the reusability.</p><blockquote><p>Blocks give context to the components.</p></blockquote><p>Now that we have our component - let's call it <code>card-simple</code> - we can use it in a <code>Featured Posts</code> block. In <strong>component's</strong> <code>manifest.json</code>, we've already defined how we want it to look by setting some defaults. When using this component in our block, we can override some attributes in <strong>block's</strong> <code>manifest.json</code>. Since it will be used for displaying featured posts, we can define that <code>imagePosition</code> should be set to <strong>top</strong>.</p><p>After defining how we want our component to look while displaying featured posts, we need another attribute which will allow us to choose which posts to display in our block.</p><p>To do that, we'll add a new attribute called <code>featuredPosts</code> which will define which posts will be displayed in our block. For each selected post, another <code>card-simple</code> component is added, and featured image and post title are dynamically added to its image and heading components. More about the query logic and adding new options in a block will be covered in a future post.</p><p>You may be wondering, can you have a block that allows you to use all options of the <code>card-simple</code> component? Of course! You can create a block that allows you to set all available options in the editor and manually add content to the image and heading. There are also block variations, which allow you to set up predefined attributes for a block. More about setting up block variations may be covered in one of the future posts.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h3><p>Hopefully, these examples helped you get a better understanding of the difference between components and blocks. It may take a bit more time or practical use to understand the difference and reasoning behind it. Our next post will walk you through downloading one of our components and blocks with WP CLI and modifying it.</p>]]></content>
        <author>
            <name>Igor Obradović</name>
        </author>
        <category label="eightshift" term="eightshift"/>
        <category label="boilerplate" term="boilerplate"/>
        <category label="components" term="components"/>
        <category label="blocks" term="blocks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Initial setup and first steps]]></title>
        <id>initial-setup</id>
        <link href="https://infinum.github.io/eightshift-docs/blog/initial-setup"/>
        <updated>2022-01-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post describes how to set up Eightshift Boilerplate theme, and covers some of the most common issues that may occur]]></summary>
        <content type="html"><![CDATA[<p>As is often the case when trying out something new, you might encounter some hiccups. You're trying out our Eightshift Boilerplate, but can't get it to work? Worry not, we'll go through the setup and the most common issues that may occur.</p><p>If you haven't already, be sure to read our official <a href="https://infinum.github.io/eightshift-docs/docs/welcome" target="_blank" rel="noopener noreferrer">Eightshift Docs</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="setup">Setup<a class="hash-link" href="#setup" title="Direct link to heading">​</a></h3><p>To create Eightshift theme, navigate to <code>wp-content/themes</code> in your project and type the following in the terminal:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npx create-wp-project</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Just follow the instructions and wait for the theme to download.</p><p><img loading="lazy" alt="Setup - initial prompt" src="/eightshift-docs/assets/images/setup-1-789bb1cdc385748d6875dbd5b77639c1.png" width="546" height="428"></p><p>OK, you went through the process, filled out all required information, but the theme still isn't working. There are a few more instructions in the terminal on what to do next, but you may have skipped them. While the principle <strong>"6 hours of debugging can save you 5 minutes of reading documentation"</strong> is fun, sometimes it's just not worth it. Here's what you should do:</p><ul><li>run <code>wp theme activate your-theme-name</code> to activate your new theme</li><li>navigate to <code>wp-content/themes/your-theme-name</code></li><li>try running <code>wp boilerplate --help</code> to check if our WP CLI boilerplate commands work</li><li>for easiest initial setup, run <code>wp boilerplate setup_theme</code></li><li><code>npm start</code> should trigger automatically with the previous command. If it doesn't, you can run it manually to finish the theme build process</li></ul><p><img loading="lazy" alt="Setup - instructions" src="/eightshift-docs/assets/images/setup-2-633f20d5e5bf554d96825d0483c21b12.png" width="917" height="298"></p><p>Congratulations, you've set up your Eightshift theme!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="getting-to-know-eightshift-dev-tools">Getting to know Eightshift dev tools<a class="hash-link" href="#getting-to-know-eightshift-dev-tools" title="Direct link to heading">​</a></h3><p>After successfully setting up the theme and going through files, you'll notice this file structure is quite different from traditional WordPress themes and you may think to yourself: "Oh wow, what did I get myself into?"</p><p>While it may look scary and confusing at first, once you get used to the structure, you'll see the benefits. More about that will be covered in future posts, where we'll walk you through some basics of developing with Eightshift Boilerplate.</p><p>You may want to try a few of our WP CLI commands to add another component, block, or service class. Running <code>wp boilerplate --help</code> will give you a list of commands and their short description. If you need even more details about a specific command, you can type, e.g. <code>wp boilerplate create_post_type --help</code></p><p>The final tip in this post is related to troubleshooting. Maybe you tried to add a new class or a new feature to one of the existing blocks. And now the site has crashed. In tech support, the number 1 question is <strong>"Have you tried turning it off and on again?"</strong>. In our case, the number 1 question is:</p><blockquote><p>Have you tried <code>composer dump-autoload</code> and re-running <code>npm start</code>?</p></blockquote><h3 class="anchor anchorWithStickyNavbar_mojV" id="whats-next-in-store">What's next in store?<a class="hash-link" href="#whats-next-in-store" title="Direct link to heading">​</a></h3><p>That's all for this post. In future posts we'll go through some more how-to examples like:</p><ul><li>the difference between components and blocks</li><li>downloading components and blocks from our Storybook with WP-CLI</li><li>adding new features to components and blocks</li><li>adding custom fonts to your project</li><li>adding custom queries which we'll use in one of our blocks</li><li>and many more...</li></ul><p>So stay tuned.</p>]]></content>
        <author>
            <name>Igor Obradović</name>
        </author>
        <category label="eightshift" term="eightshift"/>
        <category label="boilerplate" term="boilerplate"/>
        <category label="setup" term="setup"/>
    </entry>
</feed>