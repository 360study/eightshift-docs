<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://infinum.github.io/eightshift-docs/blog</id>
    <title>Eightshift Development kit Blog</title>
    <updated>2022-03-22T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://infinum.github.io/eightshift-docs/blog"/>
    <subtitle>Eightshift Development kit Blog</subtitle>
    <icon>https://infinum.github.io/eightshift-docs/img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[Modifying blocks - Color Theme]]></title>
        <id>modifying-blocks-color-theme</id>
        <link href="https://infinum.github.io/eightshift-docs/blog/modifying-blocks-color-theme"/>
        <updated>2022-03-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Step-by-step guide on how to modify and expand the functionality of existing blocks.]]></summary>
        <content type="html"><![CDATA[<p>In our previous post, we covered how to use Storybook and WP-CLI to add additional blocks to your project. This post will walk you through modifying an existing block step-by-step.</p><p>Since Eightshift Development kit is a starter theme, made for developers to jumpstart and speed up their development, you're welcome to modify files in it directly. There is no need to create a child theme to protect changes from updates.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="modifying-a-block-or-a-component">Modifying a block or a component?<a class="hash-link" href="#modifying-a-block-or-a-component" title="Direct link to heading">​</a></h3><p>Because we used the Quote block in our previous post, we will continue using it as an example as it's a fairly simple one. One of the first questions you may ask yourself could be: "Should I modify a component or a block?". And the answer is - it depends.</p><p>If you compare <strong><em>components/quote/quote.php</em></strong> (component) and <strong><em>custom/quote/quote.php</em></strong> (block), you'll notice that most of the HTML code is inside the component, while the block pretty much only renders the Quote component inside a wrapper. This example will walk you through the whole process of adding a new attribute and its options to a block.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="what-will-we-do">What will we do?<a class="hash-link" href="#what-will-we-do" title="Direct link to heading">​</a></h3><p>We want to style the block and add a new feature. An option to choose a color theme for the Quote block. These are the specs:</p><ul><li>each Quote block has a background with rounded corners</li><li>option for three color themes: blue, green, yellow</li><li>the background has a lighter shade of the selected color</li><li>quote icon has a stronger shade of the selected color</li></ul><p>To better help you visualize, this is how the Quote block should look like after making these changes, showcasing all three color theme variations:
<img loading="lazy" alt="Color Theme Examples" src="/eightshift-docs/assets/images/color-theme-examples-9c526b6d5abb2b21785634f8602a25a0.png" width="1067" height="234"></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-background">Adding background<a class="hash-link" href="#adding-background" title="Direct link to heading">​</a></h3><p>Initial background styling is fairly straightforward. Navigate to <strong><em>src/Blocks/components/quote/quote-style.scss</em></strong> and paste the following code inside <code>.quote</code> class:</p><div class="codeBlockContainer_I0IT language-css theme-code-block"><div class="codeBlockContent_wNvx css"><pre tabindex="0" class="prism-code language-css codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token property">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--base-font-size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">1.6</span><span class="token unit">rem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token property">border-radius</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--base-font-size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">2</span><span class="token unit">rem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">global-settings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">colors</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> light</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You may notice we're using <code>calc</code> instead of directly writing values in rems. This way makes it much easier to calculate pixel size since <code>calc(var(--base-font-size) * 1.6rem)</code> equals <code>16px</code>.</p><p>For now, we will add a simple light grey background to see how it looks. We'll replace this value later with a CSS variable.</p><blockquote><p><strong>Tip:</strong> don't hardcode hex color values directly inside your component. Instead, use colors defined in your global manifest.</p></blockquote><p>You'll notice that the changes are visible both in the editor and on the frontend. Since the Gutenberg editor adds some additional markup, sometimes you'll need to add additional styling only for the editor. In case we need to override something in the editor for our Quote component, we would simply create <strong><em>quote-editor.scss</em></strong>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-new-colors-to-your-project">Adding new colors to your project<a class="hash-link" href="#adding-new-colors-to-your-project" title="Direct link to heading">​</a></h3><p>Because the theme currently doesn't have all the required colors, we need to add additional colors which will be used for the color theme feature. We will use the colors already defined in the manifest for icon color, but we need to add lighter variations of those colors to use them for the background. Navigate to your global manifest, which is located inside <strong><em>src/Blocks/manifest.json</em></strong> and add the following values inside <code>colors</code>:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Light Blue"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"slug"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"light-blue"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"#B3E5FC"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Light Green"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"slug"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"light-green"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"#DCEDC8"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Light Yellow"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"slug"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"light-yellow"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"#FFF9C4"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-a-new-attribute-and-options-to-manifest">Adding a new attribute and options to manifest<a class="hash-link" href="#adding-a-new-attribute-and-options-to-manifest" title="Direct link to heading">​</a></h3><p>For editors to be able to choose which color theme to use for the Quote block, we need to define an attribute for it in the manifest. Navigate to <strong><em>src/Blocks/components/quote/manifest.json</em></strong> and add the following value inside <code>attributes</code>:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token property">"quoteColorTheme"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"default"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"blue"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><blockquote><p>Double-check the path of the manifest used in this example. We're adding it inside the Quote component manifest, not the Quote block manifest. </p></blockquote><p>After that, since we want to have a fixed number of options, we need to define available options. We can do that inside <code>options</code> which is on the same level as <code>attributes</code>:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token property">"options"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"quoteColorTheme"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"blue"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"green"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"yellow"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="css-variables">CSS variables<a class="hash-link" href="#css-variables" title="Direct link to heading">​</a></h3><p>Our next step is to add CSS variables to the Quote component's manifest. Inside <strong><em>manifest.json</em></strong>, on the same level as <code>attributes</code>, add the following code:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token property">"variables"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"quoteColorTheme"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"blue"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token property">"variable"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token property">"quote-background-color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"var(--global-colors-light-blue)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token property">"quote-icon-color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"var(--global-colors-blue)"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"green"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token property">"variable"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token property">"quote-background-color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"var(--global-colors-light-green)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token property">"quote-icon-color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"var(--global-colors-green)"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"yellow"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token property">"variable"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token property">"quote-background-color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"var(--global-colors-light-yellow)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token property">"quote-icon-color"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"var(--global-colors-yellow)"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Now, navigate back to Quote component's <strong><em>quote-style.scss</em></strong> and replace the <code>background-color</code> which we used for testing with the following:</p><div class="codeBlockContainer_I0IT language-css theme-code-block"><div class="codeBlockContent_wNvx css"><pre tabindex="0" class="prism-code language-css codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--quote-background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>As you can see, the variable name is the same one we used when defining background color variations in the manifest. For icon color, we do the same. After adding a new color to <code>&amp;__icon</code> selector, our code should now look like this:</p><div class="codeBlockContainer_I0IT language-css theme-code-block"><div class="codeBlockContent_wNvx css"><pre tabindex="0" class="prism-code language-css codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token selector" style="color:rgb(255, 121, 198)">&amp;__icon</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">display</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> block</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">margin-bottom</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">1</span><span class="token unit">rem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--quote-icon-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="outputting-css-variables-in-editor">Outputting CSS variables in editor<a class="hash-link" href="#outputting-css-variables-in-editor" title="Direct link to heading">​</a></h3><p>To make our color theme visible in editor, we have to add few lines of code to <strong><em>src/Blocks/components/quote/components/quote-editor.js</em></strong> file. First, we need to import a few functions. We need <code>useMemo</code> from <strong><em>react</em></strong>, <code>outputCssVariables</code> and <code>getUnique</code> from <strong><em>@eightshift/frontend-libs/scripts</em></strong> and finally, we need data from the global manifest.</p><p>After importing these and defining a unique constant, your code should look like this:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> useMemo </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">classnames</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'classnames'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> checkAttr</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> props</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> selector</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> outputCssVariables</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> getUnique </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@eightshift/frontend-libs/scripts'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">HeadingEditor</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'../../heading/components/heading-editor'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ParagraphEditor</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'../../paragraph/components/paragraph-editor'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">manifest</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'./../manifest.json'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">globalManifest</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'./../../../manifest.json'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">QuoteEditor</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> unique </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useMemo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getUnique</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Next, we need to add a unique <code>data-id</code> and output the <code>&lt;style&gt;</code> tag containing CSS variables.</p><p>Modify your return statement so it looks like this:</p><div class="codeBlockContainer_I0IT language-jsx theme-code-block"><div class="codeBlockContent_wNvx jsx"><pre tabindex="0" class="prism-code language-jsx codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">figure</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">quoteClass</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">data-id</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">unique</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token function" style="color:rgb(80, 250, 123)">outputCssVariables</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> manifest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unique</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> globalManifest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">            //...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>If you try adding a Quote block in the editor, you should notice that it now has a light blue background with a quote icon in a darker shade of blue. This is the default value for the <code>quoteColorTheme</code> attribute we added in the component's manifest.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="outputting-css-variables-in-the-php-template">Outputting CSS variables in the PHP template<a class="hash-link" href="#outputting-css-variables-in-the-php-template" title="Direct link to heading">​</a></h3><p>The PHP template for the Quote component is located in <strong><em>src/Blocks/components/quote/quote.php</em></strong>. This process is similar to the one described above, it's just written in PHP. All helper methods we need for this are contained inside the <code>Components</code> class, which is already included in this file.</p><p>Similar to the JS template, we need a unique value, assign it to <code>data-id</code>, and output CSS variables. After adding these, the code should look like this:</p><div class="codeBlockContainer_I0IT language-php theme-code-block"><div class="codeBlockContent_wNvx php"><pre tabindex="0" class="prism-code language-php codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token php language-php delimiter important">&lt;?php</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php"></span><span class="token php language-php comment" style="color:rgb(98, 114, 164)">//...</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php"></span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$quoteClass</span><span class="token php language-php"> </span><span class="token php language-php operator">=</span><span class="token php language-php"> </span><span class="token php language-php class-name static-context">Components</span><span class="token php language-php operator">::</span><span class="token php language-php function" style="color:rgb(80, 250, 123)">classnames</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php">    </span><span class="token php language-php class-name static-context">Components</span><span class="token php language-php operator">::</span><span class="token php language-php function" style="color:rgb(80, 250, 123)">selector</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$componentClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$componentClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php">    </span><span class="token php language-php class-name static-context">Components</span><span class="token php language-php operator">::</span><span class="token php language-php function" style="color:rgb(80, 250, 123)">selector</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$blockClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$blockClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$selectorClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php">    </span><span class="token php language-php class-name static-context">Components</span><span class="token php language-php operator">::</span><span class="token php language-php function" style="color:rgb(80, 250, 123)">selector</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$additionalClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$additionalClass</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php"></span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php"></span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$unique</span><span class="token php language-php"> </span><span class="token php language-php operator">=</span><span class="token php language-php"> </span><span class="token php language-php class-name static-context">Components</span><span class="token php language-php operator">::</span><span class="token php language-php function" style="color:rgb(80, 250, 123)">getUnique</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token php language-php"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token php language-php"></span><span class="token php language-php delimiter important">?&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">figure</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value php language-php delimiter important" style="color:rgb(255, 121, 198)">&lt;?php</span><span class="token tag attr-value php language-php" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-value php language-php keyword" style="color:rgb(189, 147, 249);font-style:italic">echo</span><span class="token tag attr-value php language-php" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-value php language-php function punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token tag attr-value php language-php function" style="color:rgb(80, 250, 123)">esc_attr</span><span class="token tag attr-value php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag attr-value php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$quoteClass</span><span class="token tag attr-value php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag attr-value php language-php punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag attr-value php language-php" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-value php language-php delimiter important" style="color:rgb(255, 121, 198)">?&gt;</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">data-id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value php language-php delimiter important" style="color:rgb(255, 121, 198)">&lt;?php</span><span class="token tag attr-value php language-php" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-value php language-php keyword" style="color:rgb(189, 147, 249);font-style:italic">echo</span><span class="token tag attr-value php language-php" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-value php language-php function punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token tag attr-value php language-php function" style="color:rgb(80, 250, 123)">esc_attr</span><span class="token tag attr-value php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag attr-value php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$unique</span><span class="token tag attr-value php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag attr-value php language-php punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag attr-value php language-php" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-value php language-php delimiter important" style="color:rgb(255, 121, 198)">?&gt;</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token php language-php delimiter important">&lt;?php</span><span class="token php language-php"> </span><span class="token php language-php keyword" style="color:rgb(189, 147, 249);font-style:italic">echo</span><span class="token php language-php"> </span><span class="token php language-php class-name static-context">Components</span><span class="token php language-php operator">::</span><span class="token php language-php function" style="color:rgb(80, 250, 123)">outputCssVariables</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$attributes</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$manifest</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$unique</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token php language-php"> </span><span class="token php language-php variable" style="color:rgb(189, 147, 249);font-style:italic">$globalManifest</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token php language-php punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token php language-php"> </span><span class="token php language-php delimiter important">?&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    //...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><blockquote><p>Both PHP and JS have the same helpers to make writing code for editor and front view as similar as possible.</p></blockquote><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-options">Adding options<a class="hash-link" href="#adding-options" title="Direct link to heading">​</a></h3><p>After adding these snippets, you should already see that your block is using the blue color theme, which we defined as the default value for <code>quoteColorTheme</code> in the manifest. We want to have an easy way to change the color theme in the editor. Now we'll add a new option which will do just that.</p><p>We will add these options in <strong><em>src/Blocks/components/quote/components/quote-options.js</em></strong>. Again, we will start with the imports we will need. First one is <code>__</code> from <strong><em>@wordpress/i18n</em></strong> package. Additional imports we need are from <strong><em>@eightshift/frontend-libs/scripts</em></strong>, so we will just add those to the list.</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> __ </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@wordpress/i18n'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token maybe-class-name">ColorPaletteCustom</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token maybe-class-name">IconLabel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    icons</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    getOption</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@eightshift/frontend-libs/scripts'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Next, we can add a new attribute in options called <code>showQuoteColorTheme</code> and set it to <code>true</code> by default. If we want to use this component in other blocks, we can use this attribute for showing or hiding Color Theme Options on a specific block that uses the Quote component.</p><p>Additionally, we need to get values for <code>quoteUse</code> and <code>quoteColorTheme</code> attributes. We can use the <code>checkAttr</code> helper which first checks if a block has saved attribute value. If not, it defaults to a value defined in the manifest.</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">QuoteOptions</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        setAttributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        showQuoteColorTheme </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> quoteUse </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">checkAttr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'quoteUse'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> manifest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> quoteColorTheme </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">checkAttr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'quoteColorTheme'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> manifest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Finally, we add the Color Palette, which we will use for switching color themes.</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">quoteUse </span><span class="token operator">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">showQuoteColorTheme </span><span class="token operator">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ColorPaletteCustom</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        label</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token operator">&lt;</span><span class="token maybe-class-name">IconLabel</span><span class="token plain"> icon</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">icons</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> label</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token function" style="color:rgb(80, 250, 123)">__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'Color Theme'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'es-theme'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        colors</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token function" style="color:rgb(80, 250, 123)">getOption</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'quoteColorTheme'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> manifest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        value</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">quoteColorTheme</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        onChange</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setAttributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token function" style="color:rgb(80, 250, 123)">getAttrKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'quoteColorTheme'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> attributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> manifest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> value </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The Color Theme option should now be visible and fully functional inside the Quote block.</p><p><img loading="lazy" alt="Color Theme Options" src="/eightshift-docs/assets/images/color-theme-options-f2092fff89153d89e0dc2941c8e17aa9.png" width="275" height="143"></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-transitions-in-the-editor">Adding transitions in the editor<a class="hash-link" href="#adding-transitions-in-the-editor" title="Direct link to heading">​</a></h3><p>The options work, but you may notice there is no transition in the editor. It is not necessary but will improve the user experience. Since we do not need transition effects on the frontend, we can add these CSS rules only to the editor. To do that, we start by creating <strong><em>quote-editor.scss</em></strong> file inside <strong><em>src/Blocks/components/quote</em></strong> folder.</p><p>We add the following CSS:</p><div class="codeBlockContainer_I0IT language-css theme-code-block"><div class="codeBlockContent_wNvx css"><pre tabindex="0" class="prism-code language-css codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token selector class" style="color:rgb(255, 121, 198)">.quote</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">transition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> background-color </span><span class="token number">0.3</span><span class="token unit">s</span><span class="token plain"> ease-in-out</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token selector" style="color:rgb(255, 121, 198)">&amp;__icon</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">transition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> color </span><span class="token number">0.3</span><span class="token unit">s</span><span class="token plain"> ease-in-out</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Because we've added a new file, we have to run <code>npm start</code> again. Now the transition between colors will be much smoother.</p><p><img loading="lazy" alt="Color Theme Change" src="/eightshift-docs/assets/images/color-theme-change-cd1ede6d92339a8178f33466d37a7e16.gif" width="772" height="338"></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="closing-thoughts">Closing thoughts<a class="hash-link" href="#closing-thoughts" title="Direct link to heading">​</a></h3><p>In this post, we've covered the whole process of adding a new attribute. It involves a lot of steps and things to keep in mind, but once you get used to it, you'll be able to add quite powerful features to your blocks.</p><p>One more important thing to keep in mind is the expandability of your attributes. When adding new attributes, don't think just about what you need now, keep in mind that you may need to expand it later.</p><p>The way we built Color Theme functionality makes adding additional color themes a breeze and can be done in a matter of minutes. For "homework", try adding two more color themes of your choice. Good luck!</p>]]></content>
        <author>
            <name>Igor Obradović</name>
        </author>
        <category label="eightshift" term="eightshift"/>
        <category label="boilerplate" term="boilerplate"/>
        <category label="components" term="components"/>
        <category label="blocks" term="blocks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding components and blocks with WP-CLI]]></title>
        <id>adding-blocks-wpcli</id>
        <link href="https://infinum.github.io/eightshift-docs/blog/adding-blocks-wpcli"/>
        <updated>2022-03-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post covers how to use our WP CLI commands for adding components and blocks into your project.]]></summary>
        <content type="html"><![CDATA[<p>Although there are a few basic blocks available after creating a project, there are a lot more blocks available in the dev kit. However, you have to add them to your project using WP-CLI (the simplest method). To see the complete list of available components and blocks, visit our <a href="https://infinum.github.io/eightshift-docs/storybook/" target="_blank" rel="noopener noreferrer">Storybook</a>. </p><p>These can be used out-of-the-box, but also as a good starting point if you need similar blocks in your projects. It will also speed up your development time since you don't have to build everything from scratch.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="storybook">Storybook<a class="hash-link" href="#storybook" title="Direct link to heading">​</a></h3><p>Storybook allows you to preview how the components and blocks look and which options they have available. Since Storybook is interactive, you can try out most of the options. Think of it as a catalog with all custom blocks we've built and made ready for public use.</p><p>Each entry in Storybook should have documentation that explains the block in more detail, along with implementation instructions. Before using any block, be sure to check <code>Dependencies</code> section. Although <code>Implementation</code> section lists all the necessary WP-CLI commands required to use a specific block or a component, it is recommended to check if you have the required dependencies ready in your theme.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="wp-cli-commands">WP-CLI commands<a class="hash-link" href="#wp-cli-commands" title="Direct link to heading">​</a></h3><p>If you've read our <a href="/eightshift-docs/blog/initial-setup">Initial Setup</a> post, you're already familiar with our custom WP-CLI commands. For implementing additional components, we have <code>wp boilerplate use_component</code> command. For blocks, we have <code>wp_boilerplate use_block</code> command.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-new-component-and-block-in-our-project">Adding new component and block in our project<a class="hash-link" href="#adding-new-component-and-block-in-our-project" title="Direct link to heading">​</a></h3><p>Let's say we need a Quote block in our project. After going through the documentation of the Quote block, we see that we have one dependency, and that is the Quote component. So, to make Quote block available in our project, we need two WP-CLI commands:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">wp boilerplate use_component --name</span><span class="token operator">=</span><span class="token plain">quote</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wp boilerplate use_block --name</span><span class="token operator">=</span><span class="token plain">quote</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You should do the commands in this order because Quote component doesn't have any dependencies, while the Quote block has one dependency, and that is Quote component. Otherwise, you will get an error. After entering these commands, run <code>npm start</code> again to make sure everything works properly.</p><p>The Quote block is now ready to use and available in your blocks list. You may use it as-is, or you may want to expand its functionalities with some additional attributes. More about that will be covered in the next blog post.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="using-example-block">Using Example block<a class="hash-link" href="#using-example-block" title="Direct link to heading">​</a></h3><p>If you want to build a block almost from scratch, you can use our Example block. This is a very simple block that generates all necessary files with some example options. To add an Example block to your project, use the following WP-CLI command:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">wp boilerplate use_block --name</span><span class="token operator">=</span><span class="token plain">example</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Since our blocks use a predefined structure to make everything register automatically, adding Example block with WP-CLI will generate all required files. After it's added, feel free to rename the folder, as well as files with the name of your block and start modifying all the files. Simply replace "example" with the name of your block.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="further-reading">Further reading<a class="hash-link" href="#further-reading" title="Direct link to heading">​</a></h3><p>Our documentation has all this covered in a lot more detail, so if you would like to better understand the structure of our blocks and components, here are some chapters covering these topics:</p><ul><li><a href="/eightshift-docs/docs/basics/the-structure">Structure</a></li><li><a href="/eightshift-docs/docs/basics/block-structure">Block Structure</a></li><li><a href="/eightshift-docs/docs/basics/blocks-component-structure">Component Structure</a></li></ul>]]></content>
        <author>
            <name>Igor Obradović</name>
        </author>
        <category label="eightshift" term="eightshift"/>
        <category label="boilerplate" term="boilerplate"/>
        <category label="wpcli" term="wpcli"/>
        <category label="components" term="components"/>
        <category label="blocks" term="blocks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Components and blocks]]></title>
        <id>components-and-blocks</id>
        <link href="https://infinum.github.io/eightshift-docs/blog/components-and-blocks"/>
        <updated>2022-01-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Explanation of the difference between components and blocks on a practical example]]></summary>
        <content type="html"><![CDATA[<p>In this blog post, we'll give you a practical explanation about the difference between components and blocks. For a truly in-depth explanation about components and blocks, you can refer to <a href="https://infinum.github.io/eightshift-docs/docs/basics/blocks" target="_blank" rel="noopener noreferrer">our documentation</a>. A more specific explanation about using components in a block can be found in the <a href="https://infinum.github.io/eightshift-docs/docs/basics/blocks-component-in-block/" target="_blank" rel="noopener noreferrer">Component in a Block</a> section.</p><p>One of the things that is really confusing to newcomers is the difference between components and blocks. Let's break it all down.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="component">Component<a class="hash-link" href="#component" title="Direct link to heading">​</a></h3><blockquote><p>A component is like a blank slate, a template without context.</p></blockquote><p>It doesn't know or even care for what it will be used. Can you combine multiple simple components into one complex component? Absolutely! That's exactly what we'll do in the following example. </p><p>Let's say we have a component that consists of an image and a heading. Image and heading are two simple components that come with the theme out-of-the-box.</p><p>Here are a few examples of how this new component can be used:</p><ul><li>displaying a post</li><li>displaying a user or an author</li><li>displaying a photo with the photographer's name</li><li>and many more...</li></ul><p>As you can already see, there are many ways you can use this component. What helps expand the usability of this component even more are <code>attributes</code>. Let's say we have the following attributes:</p><ul><li><code>imagePosition</code> - left, right, top, bottom</li><li><code>imageShape</code> - rectangular, circular</li><li><code>imageWidth</code> - 25%, 50%, 75%</li><li><code>headingColor</code> - black, blue, red</li><li><code>headingSize</code> - small, medium, large</li></ul><p>These attributes give you the option to modify the look of the component, so this specific component can be used for the following:</p><ul><li><strong>related posts</strong> - rectangular image on the left side, 25% image width, heading takes up the remaining 75%, medium heading colored in blue</li><li><strong>user avatar</strong> - circular image on the left side, 25% image width, small heading colored in black</li><li><strong>photo of the day</strong> - rectangular image on the right side which takes 75% width and photographer's name is written in medium blue text</li><li><strong>featured posts</strong> - rectangular image on top, large heading in red color</li></ul><p><img loading="lazy" alt="Component with different attributes" src="/eightshift-docs/assets/images/components-bf67696f503f625fd702f636be80f592.png" width="1086" height="813"></p><p>You can even add conditional logic to your options, e.g. to have the option for <code>imageWidth</code> visible only when <code>imagePosition</code> is set to left or right. And when <code>imagePosition</code> is set to top or bottom, it defaults to 100% width.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="block">Block<a class="hash-link" href="#block" title="Direct link to heading">​</a></h3><p>So, what about blocks? Blocks can consist of one or more components and, most importantly, allow you to use them in the editor. Technically, blocks can consist of zero components, but we encourage you to build blocks from components because that increases the reusability.</p><blockquote><p>Blocks give context to the components.</p></blockquote><p>Now that we have our component - let's call it <code>card-simple</code> - we can use it in a <code>Featured Posts</code> block. In <strong>component's</strong> <code>manifest.json</code>, we've already defined how we want it to look by setting some defaults. When using this component in our block, we can override some attributes in <strong>block's</strong> <code>manifest.json</code>. Since it will be used for displaying featured posts, we can define that <code>imagePosition</code> should be set to <strong>top</strong>.</p><p>After defining how we want our component to look while displaying featured posts, we need another attribute which will allow us to choose which posts to display in our block.</p><p>To do that, we'll add a new attribute called <code>featuredPosts</code> which will define which posts will be displayed in our block. For each selected post, another <code>card-simple</code> component is added, and featured image and post title are dynamically added to its image and heading components. More about the query logic and adding new options in a block will be covered in a future post.</p><p>You may be wondering, can you have a block that allows you to use all options of the <code>card-simple</code> component? Of course! You can create a block that allows you to set all available options in the editor and manually add content to the image and heading. There are also block variations, which allow you to set up predefined attributes for a block. More about setting up block variations may be covered in one of the future posts.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h3><p>Hopefully, these examples helped you get a better understanding of the difference between components and blocks. It may take a bit more time or practical use to understand the difference and reasoning behind it. Our next post will walk you through downloading one of our components and blocks with WP CLI and modifying it.</p>]]></content>
        <author>
            <name>Igor Obradović</name>
        </author>
        <category label="eightshift" term="eightshift"/>
        <category label="boilerplate" term="boilerplate"/>
        <category label="components" term="components"/>
        <category label="blocks" term="blocks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Initial setup and first steps]]></title>
        <id>initial-setup</id>
        <link href="https://infinum.github.io/eightshift-docs/blog/initial-setup"/>
        <updated>2022-01-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post describes how to set up Eightshift Boilerplate theme, and covers some of the most common issues that may occur]]></summary>
        <content type="html"><![CDATA[<p>As is often the case when trying out something new, you might encounter some hiccups. You're trying out our Eightshift Boilerplate, but can't get it to work? Worry not, we'll go through the setup and the most common issues that may occur.</p><p>If you haven't already, be sure to read our official <a href="https://infinum.github.io/eightshift-docs/docs/welcome" target="_blank" rel="noopener noreferrer">Eightshift Docs</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="setup">Setup<a class="hash-link" href="#setup" title="Direct link to heading">​</a></h3><p>To create Eightshift theme, navigate to <code>wp-content/themes</code> in your project and type the following in the terminal:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npx create-wp-project</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Just follow the instructions and wait for the theme to download.</p><p><img loading="lazy" alt="Setup - initial prompt" src="/eightshift-docs/assets/images/setup-1-789bb1cdc385748d6875dbd5b77639c1.png" width="546" height="428"></p><p>OK, you went through the process, filled out all required information, but the theme still isn't working. There are a few more instructions in the terminal on what to do next, but you may have skipped them. While the principle <strong>"6 hours of debugging can save you 5 minutes of reading documentation"</strong> is fun, sometimes it's just not worth it. Here's what you should do:</p><ul><li>run <code>wp theme activate your-theme-name</code> to activate your new theme</li><li>navigate to <code>wp-content/themes/your-theme-name</code></li><li>try running <code>wp boilerplate --help</code> to check if our WP CLI boilerplate commands work</li><li>for easiest initial setup, run <code>wp boilerplate setup_theme</code></li><li><code>npm start</code> should trigger automatically with the previous command. If it doesn't, you can run it manually to finish the theme build process</li></ul><p><img loading="lazy" alt="Setup - instructions" src="/eightshift-docs/assets/images/setup-2-633f20d5e5bf554d96825d0483c21b12.png" width="917" height="298"></p><p>Congratulations, you've set up your Eightshift theme!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="getting-to-know-eightshift-dev-tools">Getting to know Eightshift dev tools<a class="hash-link" href="#getting-to-know-eightshift-dev-tools" title="Direct link to heading">​</a></h3><p>After successfully setting up the theme and going through files, you'll notice this file structure is quite different from traditional WordPress themes and you may think to yourself: "Oh wow, what did I get myself into?"</p><p>While it may look scary and confusing at first, once you get used to the structure, you'll see the benefits. More about that will be covered in future posts, where we'll walk you through some basics of developing with Eightshift Boilerplate.</p><p>You may want to try a few of our WP CLI commands to add another component, block, or service class. Running <code>wp boilerplate --help</code> will give you a list of commands and their short description. If you need even more details about a specific command, you can type, e.g. <code>wp boilerplate create_post_type --help</code></p><p>The final tip in this post is related to troubleshooting. Maybe you tried to add a new class or a new feature to one of the existing blocks. And now the site has crashed. In tech support, the number 1 question is <strong>"Have you tried turning it off and on again?"</strong>. In our case, the number 1 question is:</p><blockquote><p>Have you tried <code>composer dump-autoload</code> and re-running <code>npm start</code>?</p></blockquote><h3 class="anchor anchorWithStickyNavbar_mojV" id="whats-next-in-store">What's next in store?<a class="hash-link" href="#whats-next-in-store" title="Direct link to heading">​</a></h3><p>That's all for this post. In future posts we'll go through some more how-to examples like:</p><ul><li>the difference between components and blocks</li><li>downloading components and blocks from our Storybook with WP-CLI</li><li>adding new features to components and blocks</li><li>adding custom fonts to your project</li><li>adding custom queries which we'll use in one of our blocks</li><li>and many more...</li></ul><p>So stay tuned.</p>]]></content>
        <author>
            <name>Igor Obradović</name>
        </author>
        <category label="eightshift" term="eightshift"/>
        <category label="boilerplate" term="boilerplate"/>
        <category label="setup" term="setup"/>
    </entry>
</feed>