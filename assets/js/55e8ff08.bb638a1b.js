"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[7514],{1215:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"modifying-blocks-color-theme","metadata":{"permalink":"/eightshift-docs/blog/modifying-blocks-color-theme","source":"@site/blog/2022-03-04-modifying-blocks.md","title":"Modifying blocks - Color Theme","description":"Step-by-step guide on how to modify and expand the functionality of existing blocks.","date":"2022-03-22T00:00:00.000Z","formattedDate":"March 22, 2022","tags":[{"label":"eightshift","permalink":"/eightshift-docs/blog/tags/eightshift"},{"label":"boilerplate","permalink":"/eightshift-docs/blog/tags/boilerplate"},{"label":"components","permalink":"/eightshift-docs/blog/tags/components"},{"label":"blocks","permalink":"/eightshift-docs/blog/tags/blocks"}],"readingTime":8.45,"truncated":true,"authors":[{"name":"Igor Obradovi\u0107","title":"WordPress Engineer @ Infinum","key":"iobrado"}],"frontMatter":{"title":"Modifying blocks - Color Theme","description":"Step-by-step guide on how to modify and expand the functionality of existing blocks.","slug":"modifying-blocks-color-theme","authors":"iobrado","date":"2022-03-22T00:00:00.000Z","tags":["eightshift","boilerplate","components","blocks"],"hide_table_of_contents":false},"nextItem":{"title":"Adding components and blocks with WP-CLI","permalink":"/eightshift-docs/blog/adding-blocks-wpcli"}},"content":"In our previous post, we covered how to use Storybook and WP-CLI to add additional blocks to your project. This post will walk you through modifying an existing block step-by-step.\\n\x3c!--truncate--\x3e\\n\\nSince Eightshift Development kit is a starter theme, made for developers to jumpstart and speed up their development, you\'re welcome to modify files in it directly. There is no need to create a child theme to protect changes from updates.\\n\\n### Modifying a block or a component?\\nBecause we used the Quote block in our previous post, we will continue using it as an example as it\'s a fairly simple one. One of the first questions you may ask yourself could be: \\"Should I modify a component or a block?\\". And the answer is - it depends.\\n\\nIf you compare **_components/quote/quote.php_** (component) and **_custom/quote/quote.php_** (block), you\'ll notice that most of the HTML code is inside the component, while the block pretty much only renders the Quote component inside a wrapper. This example will walk you through the whole process of adding a new attribute and its options to a block.\\n\\n### What will we do?\\n\\nWe want to style the block and add a new feature. An option to choose a color theme for the Quote block. These are the specs:\\n- each Quote block has a background with rounded corners\\n- option for three color themes: blue, green, yellow\\n- the background has a lighter shade of the selected color\\n- quote icon has a stronger shade of the selected color\\n\\nTo better help you visualize, this is how the Quote block should look like after making these changes, showcasing all three color theme variations:\\n![Color Theme Examples](/img/blog/color-theme-examples.png)\\n\\n### Adding background\\n\\nInitial background styling is fairly straightforward. Navigate to **_src/Blocks/components/quote/quote-style.scss_** and paste the following code inside `.quote` class:\\n\\n```css\\npadding: calc(var(--base-font-size) * 1.6rem);\\nborder-radius: calc(var(--base-font-size) * 2rem);\\nbackground-color: global-settings(colors, light);\\n```\\nYou may notice we\'re using `calc` instead of directly writing values in rems. This way makes it much easier to calculate pixel size since `calc(var(--base-font-size) * 1.6rem)` equals `16px`.\\n\\nFor now, we will add a simple light grey background to see how it looks. We\'ll replace this value later with a CSS variable.\\n>**Tip:** don\'t hardcode hex color values directly inside your component. Instead, use colors defined in your global manifest.\\n\\nYou\'ll notice that the changes are visible both in the editor and on the frontend. Since the Gutenberg editor adds some additional markup, sometimes you\'ll need to add additional styling only for the editor. In case we need to override something in the editor for our Quote component, we would simply create **_quote-editor.scss_**.\\n\\n### Adding new colors to your project\\n\\nBecause the theme currently doesn\'t have all the required colors, we need to add additional colors which will be used for the color theme feature. We will use the colors already defined in the manifest for icon color, but we need to add lighter variations of those colors to use them for the background. Navigate to your global manifest, which is located inside **_src/Blocks/manifest.json_** and add the following values inside `colors`:\\n```json\\n{\\n\\t\\"name\\": \\"Light Blue\\",\\n\\t\\"slug\\": \\"light-blue\\",\\n\\t\\"color\\": \\"#B3E5FC\\"\\n},\\n{\\n\\t\\"name\\": \\"Light Green\\",\\n\\t\\"slug\\": \\"light-green\\",\\n\\t\\"color\\": \\"#DCEDC8\\"\\n},\\n{\\n\\t\\"name\\": \\"Light Yellow\\",\\n\\t\\"slug\\": \\"light-yellow\\",\\n\\t\\"color\\": \\"#FFF9C4\\"\\n}\\n```\\n\\n### Adding a new attribute and options to manifest\\n\\nFor editors to be able to choose which color theme to use for the Quote block, we need to define an attribute for it in the manifest. Navigate to **_src/Blocks/components/quote/manifest.json_** and add the following value inside `attributes`:\\n\\n```json\\n\\"quoteColorTheme\\": {\\n\\t\\"type\\": \\"string\\",\\n\\t\\"default\\": \\"blue\\"\\n}\\n```\\n\\n> Double-check the path of the manifest used in this example. We\'re adding it inside the Quote component manifest, not the Quote block manifest. \\n\\nAfter that, since we want to have a fixed number of options, we need to define available options. We can do that inside `options` which is on the same level as `attributes`:\\n```json\\n\\"options\\": {\\n\\t\\"quoteColorTheme\\": [\\n\\t\\t\\"blue\\",\\n\\t\\t\\"green\\",\\n\\t\\t\\"yellow\\"\\n\\t]\\n}\\n```\\n\\n### CSS variables\\n\\nOur next step is to add CSS variables to the Quote component\'s manifest. Inside **_manifest.json_**, on the same level as `attributes`, add the following code:\\n```json\\n\\"variables\\": {\\n\\t\\"quoteColorTheme\\": {\\n\\t\\t\\"blue\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\"variable\\": {\\n\\t\\t\\t\\t\\t\\"quote-background-color\\": \\"var(--global-colors-light-blue)\\",\\n\\t\\t\\t\\t\\t\\"quote-icon-color\\": \\"var(--global-colors-blue)\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\"green\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\"variable\\": {\\n\\t\\t\\t\\t\\t\\"quote-background-color\\": \\"var(--global-colors-light-green)\\",\\n\\t\\t\\t\\t\\t\\"quote-icon-color\\": \\"var(--global-colors-green)\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\"yellow\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\"variable\\": {\\n\\t\\t\\t\\t\\t\\"quote-background-color\\": \\"var(--global-colors-light-yellow)\\",\\n\\t\\t\\t\\t\\t\\"quote-icon-color\\": \\"var(--global-colors-yellow)\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t]\\n\\t}\\n}\\n```\\n\\nNow, navigate back to Quote component\'s **_quote-style.scss_** and replace the `background-color` which we used for testing with the following:\\n```css\\nbackground-color: var(--quote-background-color);\\n```\\n\\nAs you can see, the variable name is the same one we used when defining background color variations in the manifest. For icon color, we do the same. After adding a new color to `&__icon` selector, our code should now look like this:\\n\\n```css\\n&__icon {\\n\\tdisplay: block;\\n\\tmargin-bottom: 1rem;\\n\\tcolor: var(--quote-icon-color);\\n}\\n```\\n\\n### Outputting CSS variables in editor\\nTo make our color theme visible in editor, we have to add few lines of code to **_src/Blocks/components/quote/components/quote-editor.js_** file. First, we need to import a few functions. We need `useMemo` from **_react_**, `outputCssVariables` and `getUnique` from **_@eightshift/frontend-libs/scripts_** and finally, we need data from the global manifest.\\n\\nAfter importing these and defining a unique constant, your code should look like this:\\n\\n```js\\nimport React, { useMemo } from \'react\';\\nimport classnames from \'classnames\';\\nimport { checkAttr, props, selector, outputCssVariables, getUnique } from \'@eightshift/frontend-libs/scripts\';\\nimport { HeadingEditor } from \'../../heading/components/heading-editor\';\\nimport { ParagraphEditor } from \'../../paragraph/components/paragraph-editor\';\\nimport manifest from \'./../manifest.json\';\\nimport globalManifest from \'./../../../manifest.json\';\\n\\nexport const QuoteEditor = (attributes) => {\\n\\tconst unique = useMemo(() => getUnique(), []);\\n\\t//...\\n```\\nNext, we need to add a unique `data-id` and output the `<style>` tag containing CSS variables.\\n\\nModify your return statement so it looks like this:\\n\\n```jsx\\nreturn (\\n\\t<>\\n\\t\\t<figure className={quoteClass} data-id={unique}>\\n\\t\\t\\t{outputCssVariables(attributes, manifest, unique, globalManifest)}\\n\\t\\t\\t//...\\n```\\n\\nIf you try adding a Quote block in the editor, you should notice that it now has a light blue background with a quote icon in a darker shade of blue. This is the default value for the `quoteColorTheme` attribute we added in the component\'s manifest.\\n\\n### Outputting CSS variables in the PHP template\\nThe PHP template for the Quote component is located in **_src/Blocks/components/quote/quote.php_**. This process is similar to the one described above, it\'s just written in PHP. All helper methods we need for this are contained inside the `Components` class, which is already included in this file.\\n\\nSimilar to the JS template, we need a unique value, assign it to `data-id`, and output CSS variables. After adding these, the code should look like this:\\n\\n```php\\n<?php\\n//...\\n$quoteClass = Components::classnames([\\n\\tComponents::selector($componentClass, $componentClass),\\n\\tComponents::selector($blockClass, $blockClass, $selectorClass),\\n\\tComponents::selector($additionalClass, $additionalClass),\\n]);\\n\\n$unique = Components::getUnique();\\n?>\\n\\n<figure class=\\"<?php echo \\\\esc_attr($quoteClass); ?>\\" data-id=\\"<?php echo \\\\esc_attr($unique); ?>\\">\\n\\t<?php echo Components::outputCssVariables($attributes, $manifest, $unique, $globalManifest); ?>\\n\\t//...\\n```\\n\\n> Both PHP and JS have the same helpers to make writing code for editor and front view as similar as possible.\\n\\n### Adding options\\nAfter adding these snippets, you should already see that your block is using the blue color theme, which we defined as the default value for `quoteColorTheme` in the manifest. We want to have an easy way to change the color theme in the editor. Now we\'ll add a new option which will do just that.\\n\\nWe will add these options in **_src/Blocks/components/quote/components/quote-options.js_**. Again, we will start with the imports we will need. First one is `__` from **_@wordpress/i18n_** package. Additional imports we need are from **_@eightshift/frontend-libs/scripts_**, so we will just add those to the list.\\n```js\\nimport { __ } from \'@wordpress/i18n\';\\nimport {\\n\\t//...\\n\\tColorPaletteCustom,\\n\\tIconLabel,\\n\\ticons,\\n\\tgetOption\\n} from \'@eightshift/frontend-libs/scripts\';\\n```\\n\\nNext, we can add a new attribute in options called `showQuoteColorTheme` and set it to `true` by default. If we want to use this component in other blocks, we can use this attribute for showing or hiding Color Theme Options on a specific block that uses the Quote component.\\n\\nAdditionally, we need to get values for `quoteUse` and `quoteColorTheme` attributes. We can use the `checkAttr` helper which first checks if a block has saved attribute value. If not, it defaults to a value defined in the manifest.\\n\\n```js\\nexport const QuoteOptions = (attributes) => {\\n\\t//...\\n\\tconst {\\n\\t\\tsetAttributes,\\n\\t\\t//...\\n\\t\\tshowQuoteColorTheme = true,\\n\\t} = attributes;\\n\\t//...\\n\\tconst quoteUse = checkAttr(\'quoteUse\', attributes, manifest);\\n\\tconst quoteColorTheme = checkAttr(\'quoteColorTheme\', attributes, manifest);\\n```\\n\\nFinally, we add the Color Palette, which we will use for switching color themes.\\n\\n```js\\nreturn (\\n\\t<>\\n\\t\\t//...\\n\\n\\t\\t{quoteUse &&\\n\\t\\t\\t<>\\n\\t\\t\\t\\t{showQuoteColorTheme &&\\n\\t\\t\\t\\t\\t<ColorPaletteCustom\\n\\t\\t\\t\\t\\t\\tlabel={<IconLabel icon={icons.color} label={__(\'Color Theme\', \'es-theme\')} />}\\n\\t\\t\\t\\t\\t\\tcolors={getOption(\'quoteColorTheme\', attributes, manifest, true)}\\n\\t\\t\\t\\t\\t\\tvalue={quoteColorTheme}\\n\\t\\t\\t\\t\\t\\tonChange={(value) => setAttributes({ [getAttrKey(\'quoteColorTheme\', attributes, manifest)]: value })}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t}\\n\\t\\t\\t//...\\n```\\n\\nThe Color Theme option should now be visible and fully functional inside the Quote block.\\n\\n![Color Theme Options](/img/blog/color-theme-options.png)\\n\\n### Adding transitions in the editor\\n\\nThe options work, but you may notice there is no transition in the editor. It is not necessary but will improve the user experience. Since we do not need transition effects on the frontend, we can add these CSS rules only to the editor. To do that, we start by creating **_quote-editor.scss_** file inside **_src/Blocks/components/quote_** folder.\\n\\nWe add the following CSS:\\n```css\\n.quote {\\n\\ttransition: background-color 0.3s ease-in-out;\\n\\n\\t&__icon {\\n\\t\\ttransition: color 0.3s ease-in-out;\\n\\t}\\n}\\n```\\n\\nBecause we\'ve added a new file, we have to run `npm start` again. Now the transition between colors will be much smoother.\\n\\n![Color Theme Change](/img/blog/color-theme-change.gif)\\n\\n### Closing thoughts\\n\\nIn this post, we\'ve covered the whole process of adding a new attribute. It involves a lot of steps and things to keep in mind, but once you get used to it, you\'ll be able to add quite powerful features to your blocks.\\n\\nOne more important thing to keep in mind is the expandability of your attributes. When adding new attributes, don\'t think just about what you need now, keep in mind that you may need to expand it later.\\n\\nThe way we built Color Theme functionality makes adding additional color themes a breeze and can be done in a matter of minutes. For \\"homework\\", try adding two more color themes of your choice. Good luck!"},{"id":"adding-blocks-wpcli","metadata":{"permalink":"/eightshift-docs/blog/adding-blocks-wpcli","source":"@site/blog/2022-03-03-adding-blocks-wpcli.md","title":"Adding components and blocks with WP-CLI","description":"This blog post covers how to use our WP CLI commands for adding components and blocks into your project.","date":"2022-03-14T00:00:00.000Z","formattedDate":"March 14, 2022","tags":[{"label":"eightshift","permalink":"/eightshift-docs/blog/tags/eightshift"},{"label":"boilerplate","permalink":"/eightshift-docs/blog/tags/boilerplate"},{"label":"wpcli","permalink":"/eightshift-docs/blog/tags/wpcli"},{"label":"components","permalink":"/eightshift-docs/blog/tags/components"},{"label":"blocks","permalink":"/eightshift-docs/blog/tags/blocks"}],"readingTime":2.705,"truncated":true,"authors":[{"name":"Igor Obradovi\u0107","title":"WordPress Engineer @ Infinum","key":"iobrado"}],"frontMatter":{"title":"Adding components and blocks with WP-CLI","description":"This blog post covers how to use our WP CLI commands for adding components and blocks into your project.","slug":"adding-blocks-wpcli","authors":"iobrado","date":"2022-03-14T00:00:00.000Z","tags":["eightshift","boilerplate","wpcli","components","blocks"],"hide_table_of_contents":false},"prevItem":{"title":"Modifying blocks - Color Theme","permalink":"/eightshift-docs/blog/modifying-blocks-color-theme"},"nextItem":{"title":"Components and blocks","permalink":"/eightshift-docs/blog/components-and-blocks"}},"content":"Although there are a few basic blocks available after creating a project, there are a lot more blocks available in the dev kit. However, you have to add them to your project using WP-CLI (the simplest method). To see the complete list of available components and blocks, visit our [Storybook](https://infinum.github.io/eightshift-docs/storybook/). \\n\\nThese can be used out-of-the-box, but also as a good starting point if you need similar blocks in your projects. It will also speed up your development time since you don\'t have to build everything from scratch.\\n\\n\x3c!--truncate--\x3e\\n### Storybook\\n\\nStorybook allows you to preview how the components and blocks look and which options they have available. Since Storybook is interactive, you can try out most of the options. Think of it as a catalog with all custom blocks we\'ve built and made ready for public use.\\n\\nEach entry in Storybook should have documentation that explains the block in more detail, along with implementation instructions. Before using any block, be sure to check `Dependencies` section. Although `Implementation` section lists all the necessary WP-CLI commands required to use a specific block or a component, it is recommended to check if you have the required dependencies ready in your theme.\\n\\n### WP-CLI commands\\n\\nIf you\'ve read our [Initial Setup](/blog/initial-setup) post, you\'re already familiar with our custom WP-CLI commands. For implementing additional components, we have `wp boilerplate use_component` command. For blocks, we have `wp_boilerplate use_block` command.\\n\\n### Adding new component and block in our project\\n\\nLet\'s say we need a Quote block in our project. After going through the documentation of the Quote block, we see that we have one dependency, and that is the Quote component. So, to make Quote block available in our project, we need two WP-CLI commands:\\n\\n```bash\\nwp boilerplate use_component --name=quote\\nwp boilerplate use_block --name=quote\\n```\\n\\nYou should do the commands in this order because Quote component doesn\'t have any dependencies, while the Quote block has one dependency, and that is Quote component. Otherwise, you will get an error. After entering these commands, run `npm start` again to make sure everything works properly.\\n\\nThe Quote block is now ready to use and available in your blocks list. You may use it as-is, or you may want to expand its functionalities with some additional attributes. More about that will be covered in the next blog post.\\n\\n### Using Example block\\n\\nIf you want to build a block almost from scratch, you can use our Example block. This is a very simple block that generates all necessary files with some example options. To add an Example block to your project, use the following WP-CLI command:\\n```bash\\nwp boilerplate use_block --name=example\\n```\\nSince our blocks use a predefined structure to make everything register automatically, adding Example block with WP-CLI will generate all required files. After it\'s added, feel free to rename the folder, as well as files with the name of your block and start modifying all the files. Simply replace \\"example\\" with the name of your block.\\n\\n### Further reading\\nOur documentation has all this covered in a lot more detail, so if you would like to better understand the structure of our blocks and components, here are some chapters covering these topics:\\n- [Structure](/docs/basics/the-structure)\\n- [Block Structure](/docs/basics/block-structure)\\n- [Component Structure](/docs/basics/blocks-component-structure)"},{"id":"components-and-blocks","metadata":{"permalink":"/eightshift-docs/blog/components-and-blocks","source":"@site/blog/2022-01-21-components-and-blocks.md","title":"Components and blocks","description":"Explanation of the difference between components and blocks on a practical example","date":"2022-01-21T00:00:00.000Z","formattedDate":"January 21, 2022","tags":[{"label":"eightshift","permalink":"/eightshift-docs/blog/tags/eightshift"},{"label":"boilerplate","permalink":"/eightshift-docs/blog/tags/boilerplate"},{"label":"components","permalink":"/eightshift-docs/blog/tags/components"},{"label":"blocks","permalink":"/eightshift-docs/blog/tags/blocks"}],"readingTime":3.73,"truncated":true,"authors":[{"name":"Igor Obradovi\u0107","title":"WordPress Engineer @ Infinum","key":"iobrado"}],"frontMatter":{"title":"Components and blocks","description":"Explanation of the difference between components and blocks on a practical example","slug":"components-and-blocks","authors":"iobrado","tags":["eightshift","boilerplate","components","blocks"],"hide_table_of_contents":false},"prevItem":{"title":"Adding components and blocks with WP-CLI","permalink":"/eightshift-docs/blog/adding-blocks-wpcli"},"nextItem":{"title":"Initial setup and first steps","permalink":"/eightshift-docs/blog/initial-setup"}},"content":"In this blog post, we\'ll give you a practical explanation about the difference between components and blocks. For a truly in-depth explanation about components and blocks, you can refer to [our documentation](https://infinum.github.io/eightshift-docs/docs/basics/blocks). A more specific explanation about using components in a block can be found in the [Component in a Block](https://infinum.github.io/eightshift-docs/docs/basics/blocks-component-in-block/) section.\\n\\n\x3c!--truncate--\x3e\\nOne of the things that is really confusing to newcomers is the difference between components and blocks. Let\'s break it all down.\\n\\n### Component\\n\\n> A component is like a blank slate, a template without context.\\n\\nIt doesn\'t know or even care for what it will be used. Can you combine multiple simple components into one complex component? Absolutely! That\'s exactly what we\'ll do in the following example. \\n\\nLet\'s say we have a component that consists of an image and a heading. Image and heading are two simple components that come with the theme out-of-the-box.\\n\\nHere are a few examples of how this new component can be used:\\n- displaying a post\\n- displaying a user or an author\\n- displaying a photo with the photographer\'s name\\n- and many more...\\n\\nAs you can already see, there are many ways you can use this component. What helps expand the usability of this component even more are `attributes`. Let\'s say we have the following attributes:\\n- `imagePosition` - left, right, top, bottom\\n- `imageShape` - rectangular, circular\\n- `imageWidth` - 25%, 50%, 75%\\n- `headingColor` - black, blue, red\\n- `headingSize` - small, medium, large\\n\\nThese attributes give you the option to modify the look of the component, so this specific component can be used for the following:\\n\\n- **related posts** - rectangular image on the left side, 25% image width, heading takes up the remaining 75%, medium heading colored in blue\\n- **user avatar** - circular image on the left side, 25% image width, small heading colored in black\\n- **photo of the day** - rectangular image on the right side which takes 75% width and photographer\'s name is written in medium blue text\\n- **featured posts** - rectangular image on top, large heading in red color\\n\\n![Component with different attributes](/img/blog/components.png)\\n\\nYou can even add conditional logic to your options, e.g. to have the option for `imageWidth` visible only when `imagePosition` is set to left or right. And when `imagePosition` is set to top or bottom, it defaults to 100% width.\\n\\n### Block\\n\\nSo, what about blocks? Blocks can consist of one or more components and, most importantly, allow you to use them in the editor. Technically, blocks can consist of zero components, but we encourage you to build blocks from components because that increases the reusability.\\n\\n> Blocks give context to the components.\\n\\nNow that we have our component - let\'s call it `card-simple` - we can use it in a `Featured Posts` block. In **component\'s** `manifest.json`, we\'ve already defined how we want it to look by setting some defaults. When using this component in our block, we can override some attributes in **block\'s** `manifest.json`. Since it will be used for displaying featured posts, we can define that `imagePosition` should be set to **top**.\\n\\nAfter defining how we want our component to look while displaying featured posts, we need another attribute which will allow us to choose which posts to display in our block.\\n\\nTo do that, we\'ll add a new attribute called `featuredPosts` which will define which posts will be displayed in our block. For each selected post, another `card-simple` component is added, and featured image and post title are dynamically added to its image and heading components. More about the query logic and adding new options in a block will be covered in a future post.\\n\\nYou may be wondering, can you have a block that allows you to use all options of the `card-simple` component? Of course! You can create a block that allows you to set all available options in the editor and manually add content to the image and heading. There are also block variations, which allow you to set up predefined attributes for a block. More about setting up block variations may be covered in one of the future posts.\\n\\n### Conclusion\\n\\nHopefully, these examples helped you get a better understanding of the difference between components and blocks. It may take a bit more time or practical use to understand the difference and reasoning behind it. Our next post will walk you through downloading one of our components and blocks with WP CLI and modifying it."},{"id":"initial-setup","metadata":{"permalink":"/eightshift-docs/blog/initial-setup","source":"@site/blog/2022-01-20-initial-setup.md","title":"Initial setup and first steps","description":"This blog post describes how to set up Eightshift Boilerplate theme, and covers some of the most common issues that may occur","date":"2022-01-20T00:00:00.000Z","formattedDate":"January 20, 2022","tags":[{"label":"eightshift","permalink":"/eightshift-docs/blog/tags/eightshift"},{"label":"boilerplate","permalink":"/eightshift-docs/blog/tags/boilerplate"},{"label":"setup","permalink":"/eightshift-docs/blog/tags/setup"}],"readingTime":2.545,"truncated":true,"authors":[{"name":"Igor Obradovi\u0107","title":"WordPress Engineer @ Infinum","key":"iobrado"}],"frontMatter":{"title":"Initial setup and first steps","description":"This blog post describes how to set up Eightshift Boilerplate theme, and covers some of the most common issues that may occur","slug":"initial-setup","authors":"iobrado","tags":["eightshift","boilerplate","setup"],"hide_table_of_contents":false},"prevItem":{"title":"Components and blocks","permalink":"/eightshift-docs/blog/components-and-blocks"}},"content":"As is often the case when trying out something new, you might encounter some hiccups. You\'re trying out our Eightshift Boilerplate, but can\'t get it to work? Worry not, we\'ll go through the setup and the most common issues that may occur.\\n\\n\x3c!--truncate--\x3e\\nIf you haven\'t already, be sure to read our official [Eightshift Docs](https://infinum.github.io/eightshift-docs/docs/welcome).\\n\\n### Setup\\n\\nTo create Eightshift theme, navigate to `wp-content/themes` in your project and type the following in the terminal:\\n\\n```bash\\nnpx create-wp-project\\n```\\n\\nJust follow the instructions and wait for the theme to download.\\n\\n![Setup - initial prompt](/img/blog/setup-1.png)\\n\\nOK, you went through the process, filled out all required information, but the theme still isn\'t working. There are a few more instructions in the terminal on what to do next, but you may have skipped them. While the principle **\\"6 hours of debugging can save you 5 minutes of reading documentation\\"** is fun, sometimes it\'s just not worth it. Here\'s what you should do:\\n\\n- run `wp theme activate your-theme-name` to activate your new theme\\n- navigate to `wp-content/themes/your-theme-name`\\n- try running `wp boilerplate --help` to check if our WP CLI boilerplate commands work\\n- for easiest initial setup, run `wp boilerplate setup_theme`\\n- `npm start` should trigger automatically with the previous command. If it doesn\'t, you can run it manually to finish the theme build process\\n\\n![Setup - instructions](/img/blog/setup-2.png)\\n\\nCongratulations, you\'ve set up your Eightshift theme!\\n\\n### Getting to know Eightshift dev tools\\n\\nAfter successfully setting up the theme and going through files, you\'ll notice this file structure is quite different from traditional WordPress themes and you may think to yourself: \\"Oh wow, what did I get myself into?\\"\\n\\nWhile it may look scary and confusing at first, once you get used to the structure, you\'ll see the benefits. More about that will be covered in future posts, where we\'ll walk you through some basics of developing with Eightshift Boilerplate.\\n\\nYou may want to try a few of our WP CLI commands to add another component, block, or service class. Running `wp boilerplate --help` will give you a list of commands and their short description. If you need even more details about a specific command, you can type, e.g. `wp boilerplate create_post_type --help`\\n\\nThe final tip in this post is related to troubleshooting. Maybe you tried to add a new class or a new feature to one of the existing blocks. And now the site has crashed. In tech support, the number 1 question is **\\"Have you tried turning it off and on again?\\"**. In our case, the number 1 question is:\\n\\n> Have you tried `composer dump-autoload` and re-running `npm start`?\\n\\n### What\'s next in store?\\n\\nThat\'s all for this post. In future posts we\'ll go through some more how-to examples like:\\n- the difference between components and blocks\\n- downloading components and blocks from our Storybook with WP-CLI\\n- adding new features to components and blocks\\n- adding custom fonts to your project\\n- adding custom queries which we\'ll use in one of our blocks\\n- and many more...\\n\\nSo stay tuned."}]}')}}]);