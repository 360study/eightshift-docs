"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[7848],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8615:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},assets:function(){return u},toc:function(){return p},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],s={id:"columns-post-type",title:"Post Type"},i=void 0,c={unversionedId:"legacy/v4/guides/columns-post-type",id:"legacy/v4/guides/columns-post-type",title:"Post Type",description:"docs-source",source:"@site/docs/legacy/v4/guides/columns-post-type.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/columns-post-type",permalink:"/eightshift-docs/docs/legacy/v4/guides/columns-post-type",tags:[],version:"current",frontMatter:{id:"columns-post-type",title:"Post Type"},sidebar:"docs",previous:{title:"Route Example",permalink:"/eightshift-docs/docs/legacy/v4/guides/rest-route-example"},next:{title:"Taxonomy",permalink:"/eightshift-docs/docs/legacy/v4/guides/columns-taxonomy"}},u={},p=[{value:"Example:",id:"example",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-libs/blob/develop/src/columns/class-base-post-type-columns.php"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"}))),(0,a.kt)("p",null,"Post Type Column class is located in ",(0,a.kt)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it use ",(0,a.kt)("inlineCode",{parentName:"p"},"Eightshift_Libs\\Columns\\Base_Post_Type_Columns")," class."),(0,a.kt)("h2",{id:"example"},"Example:"),(0,a.kt)("p",null,"To create custom column:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"make a new class ",(0,a.kt)("inlineCode",{parentName:"li"},"src/columns/class-example-column.php"),"."),(0,a.kt)("li",{parentName:"ol"},"implement all the methods provided in the example."),(0,a.kt)("li",{parentName:"ol"},"register the class inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"class-main.php")," file."),(0,a.kt)("li",{parentName:"ol"},"dump autoload.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n/**\n * Example_Column class file\n *\n * @since 1.1.0\n * @package Eightshift_Boilerplate\\Columns\n */\n\ndeclare( strict_types=1 );\n\nnamespace Eightshift_Boilerplate\\Columns;\n\n/**\n * Class Example_Column.\n */\nclass Example_Column extends Base_Post_Columns {\n\n  /**\n   * Column name constant name.\n   *\n   * @var string\n   */\n  const COLUMN_NAME = 'example';\n\n  /**\n   * Get the slug of the post type where the additional column should appear.\n   *\n   * @return array The name of the post type.\n   */\n  protected function get_post_type_slug() : array {\n    return [ 'post' ];\n  }\n\n  /**\n   * Add additional post columns to the columns array.\n   *\n   * @param array $columns The existing column names array with default post columns (title, author, date etc.).\n   * @return array         Modified column names array.\n   */\n  public function add_column_name( array $columns ) : array {\n    $columns[ static::COLUMN_NAME ] = esc_html__( 'Example', 'eightshift-boilerplate' );\n\n    return $columns;\n  }\n\n  /**\n   * Render the post column content in the custom post column\n   *\n   * @param  string $column_name The name of the column to display.\n   * @param  int    $post_id     The current post ID.\n   * @return void\n   */\n  public function render_column_content( string $column_name, int $post_id ) : void {\n    if ( $column_name === static::COLUMN_NAME ) {\n      echo 'column value';\n    }\n  }\n}\n")),(0,a.kt)("div",{class:"legacy-badge legacy-badge--v4"}))}d.isMDXComponent=!0}}]);